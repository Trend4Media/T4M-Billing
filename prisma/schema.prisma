generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEAM_LEADER
  SALES_REP
  FINANCE
}

enum PeriodStatus {
  DRAFT
  ACTIVE
  LOCKED
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum PayoutStatus {
  DRAFT
  SUBMITTED
  IN_PROGRESS
  APPROVED
  PAID
  REJECTED
}

enum ComponentType {
  BASE_COMMISSION
  ACTIVITY_COMMISSION
  M0_5_BONUS
  M1_BONUS
  M1_RETENTION_BONUS
  M2_BONUS
  DOWNLINE_A
  DOWNLINE_B
  DOWNLINE_C
  TEAM_BONUS
  TEAM_RECRUITMENT
  TEAM_GRADUATION
  ADJUSTMENT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role
  active    Boolean  @default(true)
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  managedCreators Creator[]
  revenueItems    RevenueItem[]
  commissions     CommissionLedger[]
  payouts         Payout[]
  
  // Genealogy Relations
  parentEdges     OrgEdge[] @relation("ParentUser")
  childEdges      OrgEdge[] @relation("ChildUser")
  ancestorRels    OrgRelation[] @relation("AncestorUser")
  descendantRels  OrgRelation[] @relation("DescendantUser")

  @@map("users")
}

model Creator {
  id        String   @id @default(cuid())
  handle    String   @unique
  managerId String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  manager      User?         @relation(fields: [managerId], references: [id])
  revenueItems RevenueItem[]

  @@map("creators")
}

model Period {
  id         String       @id // Format: YYYYMM (e.g., "202401")
  year       Int
  month      Int
  usdEurRate Decimal?     @db.Decimal(10, 6)
  status     PeriodStatus @default(DRAFT)
  lockedAt   DateTime?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  importBatches ImportBatch[]
  revenueItems  RevenueItem[]
  commissions   CommissionLedger[]
  payouts       Payout[]

  @@unique([year, month])
  @@map("periods")
}

model RuleSet {
  id         String   @id @default(cuid())
  jsonRules  Json // Contains all percentage rates, fixed bonuses, team targets
  activeFrom DateTime
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("rule_sets")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String?
  fileData  Bytes?   // For storing logo files
  mimeType  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model ImportBatch {
  id           String       @id @default(cuid())
  periodId     String
  fileName     String
  status       ImportStatus @default(PENDING)
  rowCount     Int?
  errorSummary Json?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  period       Period        @relation(fields: [periodId], references: [id])
  revenueItems RevenueItem[]

  @@map("import_batches")
}

model RevenueItem {
  id             String  @id @default(cuid())
  periodId       String
  creatorId      String
  managerId      String
  handle         String
  diamonds       Int     @default(0)
  estBaseUsd     Decimal @db.Decimal(12, 2)
  estActivityUsd Decimal @db.Decimal(12, 2)
  m0_5           Boolean @default(false)
  m1             Boolean @default(false)
  m1Retention    Boolean @default(false)
  m2             Boolean @default(false)
  importBatchId  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  period      Period       @relation(fields: [periodId], references: [id])
  creator     Creator      @relation(fields: [creatorId], references: [id])
  manager     User         @relation(fields: [managerId], references: [id])
  importBatch ImportBatch? @relation(fields: [importBatchId], references: [id])

  @@unique([periodId, creatorId])
  @@map("revenue_items")
}

model CommissionLedger {
  id        String        @id @default(cuid())
  periodId  String
  userId    String
  component ComponentType
  amountUsd Decimal?      @db.Decimal(12, 2)
  amountEur Decimal       @db.Decimal(12, 2)
  calc      Json // Calculation details for audit
  createdAt DateTime      @default(now())

  // Relations
  period Period @relation(fields: [periodId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("commission_ledger")
}

model Payout {
  id          String        @id @default(cuid())
  periodId    String
  managerId   String
  amountEur   Decimal       @db.Decimal(12, 2)
  status      PayoutStatus  @default(DRAFT)
  requestedAt DateTime?
  processedAt DateTime?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  period Period      @relation(fields: [periodId], references: [id])
  manager User       @relation(fields: [managerId], references: [id])
  lines   PayoutLine[]

  @@unique([periodId, managerId])
  @@map("payouts")
}

model PayoutLine {
  id        String        @id @default(cuid())
  payoutId  String
  component ComponentType
  amountEur Decimal       @db.Decimal(12, 2)

  // Relations
  payout Payout @relation(fields: [payoutId], references: [id], onDelete: Cascade)

  @@map("payout_lines")
}

// Genealogy System for Downline Management
model OrgEdge {
  id        String    @id @default(cuid())
  parentId  String
  childId   String
  validFrom DateTime  @default(now())
  validTo   DateTime?
  createdAt DateTime  @default(now())

  // Relations
  parent User @relation("ParentUser", fields: [parentId], references: [id])
  child  User @relation("ChildUser", fields: [childId], references: [id])

  @@unique([parentId, childId, validFrom])
  @@map("org_edges")
}

model OrgRelation {
  id           String @id @default(cuid())
  ancestorId   String
  descendantId String
  depth        Int // 1=A, 2=B, 3=C

  // Relations
  ancestor   User @relation("AncestorUser", fields: [ancestorId], references: [id])
  descendant User @relation("DescendantUser", fields: [descendantId], references: [id])

  @@unique([ancestorId, descendantId])
  @@map("org_relations")
}